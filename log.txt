12.10.2019 - Log created (dburian)
	I've create this log to help us maintain this project. Here we can archive:
		. reasoning for important decisions
		. milestones
		. todos
		. your thoughts regarding the project
		and many others. Feel free to abuse this log, unimportant messages can be deleted afterwards.
	For each new subject please include the date and (eventhough this will be evident from git log) the author of the log.
	Also if you want you can write to log in spanish, but just for the sake of everybody to understand, I decided to write in english. Hope you don't mind :).

12.10.2019 - Git strategy (dburian)
	To maximalize our team effort I feel like our git committing strategy should to be consistent and correct, so we avoid rollbacks and difficult merges.
	I propose the following:
		. every member has his dev branch of the project and works on his part (possibly marked in trello board)
		. everytime a team member would like to incorporate changes to the master branch (for example after he finishes a task in trello board),
			he would first merge a master branch into his, resolve confilcts there and then merging the master branch with his.
	The result is that the master branch will always be in a consistent state. The only problem is when two members are working on a merge, so we should give others a heads up,
	before trying to merge the master branch with ours.
	Please write here a comment if you agree or wish to propose something different...

12.10.2019 - Project folder structure (dburian)
	Just to maintain our project a little easier I decided to give our folder structure a redesign so we don't have to think about where stuff is or where to put it.
	Again just proposal, so feel free to write a comment below this...

	DAWI/	--home dir, you can put here stuff that is somehow connected to the project
		fact/	--web page, place for all .htmls
			css/	--place for all .css, inner structure described below
				base/
				layout/
				modules/
				state/
			js/
			images/
		mockups/

	In my experience .css files can become a mess. There are many ways of sorting the styles (not only the files), so before proposing I read for a little while.
	Decided to go with SMACSS - Scalable and Modular Architecture for CSS. The basics are as follows:
		. base	- all the styles that are connected to types of elements (for example we do not want a visited link to have that purplish color no matter where it is on the website)
			- these styles are applyied always and everywhere
		. layout - divide the page into sections. Layouts hold one or more modules together.
		. modules -  are the reusable, modular parts of our design. They are the callouts, the sidebar sections, the product lists and so on.
		. state - are ways to describe how our modules or layouts will look when in a particular state.
	--more info here: http://smacss.com/book/categorizing

	Also I would like to propose a naming convention... Typically ids are going to be used in layouts, just because there is no reason for a module to have an id, when it should
	represent a reusable part of a web page, thus it is expected that there will be more modules of the same type in one page. Even when you think a module is unique, it is still
	something that is a small part of a web page and using id, would limit us to not using that small part again. On the other hand when laying out the main parts of the webpage,
	like the main wrapper or main content, we rely on the fact that there is only one main content or wrapper, therefore we use an id. But there is a catch. Often we see a reapeating layout
	so we would like to use a class, because it is likely that we would like to use it on the same page. So... the convention proposal is following...
		element-type		-> base style
		#id 			-> layout style
		.l-layout-name 		-> repeating layout style
		.class-name 		-> module style
		.is-state-class-name	-> state style

	btw if you are wondering from where did I get this info it's here:
		https://learn.shayhowe.com/advanced-html-css/performance-organization/
		(and also the smacss website)

	I know that, by now, it's became a quite a read, but I think in the long run, and also seems like additional work, but believe me, by the end of the website we are going to be glad, that
	we chose some way of distinguishing between a module style and a layout style. Image instead of working with strings, ints, floats, file streams, arrays and ... but working with a bunch of
	objects. You wouldn't know whats what by the end of a small homework :D.

12.10.2019 - Note on SASS (dburian)
	Because I think SASS saves time and money, I am going to be using it. Feel free not to use it or join me. Because you two are leaning towards raw css we can keep the production webpage
	in raw css and if I'll want to incorporate the changes I will revrite it to sass :). Sass just generates raw css, so me using sass will have no efect on your workflow. So do not be confused if you see a .sass files somewhere :).

12.10.2019 - Trello tasks (dburian)
	I've added some more detailed tasks, that more closely follow our future goals. I know that you have done some work on the website already so feel free to add a task or
	to sign yourself to one that already exists and move it to "Doing" column. Thanks :).

19.10.2019 - Bootstrap (dburian)
	Some days ago we were talking with Jindra about incorporating bootstrap's grid system into our website. Today a I did a little bit of reading and discoverd that Bootstrap really isn't the way to go. At least for us. The main reasons are:
	. To use BS we would need another skill set we do not have
	. BS is too heavy for our needs (the site should be lean, fast and minimal)
	. BS uses flexbox (and maybe javascript? - not 100% sure) for it's grid system, when actually CSS grid is all we need

	So note to ourselves: If somewhere in the future we would like to incorporate BS please do not. These reasons should apply for the whole development process. In adittion this gives us opportunity to learn responsive design.

19.10.2019 - Using SCSS (dburian)
	It ocurred to me, that the team production would benefit from unified CSS system. So from now on I think we should use SCSS files for styling. It is the same principle as SASS, but the grammar of the syntax is superset of plain CSS grammar. In other words you would be able to write plain old CSS and when you feel like you mastered the syntax and understand it you would be able to utilize all those features SCSS provides.

2.11.2019 - Relative unit (dburian)
	Ok so after digging around I realized that I overcomplicated things. Amazingly and surprisingly media queries based on screen width in pixels react to page zoom. This changes things dramatically as I thought that this will have to be done using those relative units. So a new plan...font sizes in calc(rem+vw) and everything else can be dependent on whatever. We just have to make sure that all screen widths work. Browser is going to take care of the zoom issue.

17.11.2019 - Px to rem to px (dburian)
	So the computations of pixels from design to rems in css to px in browser were getting kind of complicated so I decided to describe them here.
	In short there are free unit spaces. Pixels in design space, Rems in scss files and pixels in browser space. Because we defined our own function to translate number of rems into number of pixels in browser, computing one unit into another is not straight forward. First lets look at the second translation:

	1) rems -> pxs in browser (function g)
		This function is dependent on two things...the default rem setting (set by browser on zoom) and width of the screen. That way the font-size changes with screen width and enabling zooming at the same time. This also allows us to tinker with how much the font size changes on zoom.
	2) pxs in design -> rems (function f)
		This was the unknown function. But after giving it a though I realized it is actually g^-1. The simple thing we want to achieve is that when an element is X pxs wide in design, it should be wide X pxs in browser when the screen is the same size as in design and the zoom is 100%. So actually f needs to compute how many rems is X pxs with screen size of Y and with default font size of 16px (default for strong majority  of browsers). This is exactly what g^-1 computes.

	The actual computations:
		1) function g 
			g is tinkered with constantly, but in its essence it is just linear function with some constants. So the number of rems is just multiplied by a number (C) thats dependent on screen width and default font size.
		2) function f
			f uses the same computations as g, only it divides the number of pixels by that number C.

